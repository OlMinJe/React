{"ast":null,"code":"const $canvas = document.querySelector(\"canvas\");\nconst ctx = $canvas.getContext(\"2d\");\nconst getRandomRadius = () => Math.random() * 1 + 0.5;\nconst getRandomSpeed = () => Math.random() * 0.3 + 0.1;\nconst getRandomDir = () => [-1, 1][Math.floor(Math.random() * 2)];\nconst Snow = {\n  data: [],\n  canvasWidth: $canvas.clientWidth,\n  canvasHeight: $canvas.clientHeight,\n  init() {\n    Snow.make();\n    Snow.loop();\n  },\n  loop() {\n    Snow.move();\n    Snow.draw();\n    window.requestAnimationFrame(Snow.loop);\n  },\n  make() {\n    const data = [];\n\n    // 랜덤한 데이터 200개 생성\n    for (let i = 0; i < 200; i++) {\n      const x = Math.random() * Snow.canvasWidth;\n      const y = Math.random() * Snow.canvasHeight;\n      const size = getRandomRadius();\n      const speed = getRandomSpeed();\n      const dir = getRandomDir();\n      data.push({\n        x,\n        y,\n        size,\n        speed,\n        dir\n      });\n    }\n\n    // Snow 객체에 데이터 저장\n    Snow.data = data;\n  },\n  move() {\n    Snow.data = Snow.data.map(item => {\n      // 방향에 맞게 이동\n      item.x += item.dir * item.speed;\n      item.y += item.speed;\n\n      // 캔버스를 벗어났는지 판단\n      const isMinOverPositionX = -item.size > item.x;\n      const isMaxOverPositionX = item.x > Snow.canvasWidth;\n      const isOverPositionY = item.y > Snow.canvasHeight;\n\n      // 벗어나면 반대방향, 맨 위로\n      if (isMinOverPositionX || isMaxOverPositionX) {\n        item.dir *= -1;\n      }\n      if (isOverPositionY) {\n        item.y = -item.size;\n      }\n      return item;\n    });\n  },\n  draw() {\n    ctx.clearRect(0, 0, Snow.canvasWidth, Snow.canvasHeight);\n    ctx.fillStyle = \"#0f1018\";\n    ctx.fillRect(0, 0, Snow.canvasWidth, Snow.canvasHeight);\n    Snow.data.forEach(item => {\n      ctx.beginPath();\n      ctx.fillStyle = \"rgba(255, 255, 255, .6)\";\n      ctx.arc(item.x, item.y, item.size, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.closePath();\n    });\n  }\n};\nSnow.init();\nwindow.onresize = () => {\n  Snow.canvasWidth = $canvas.clientWidth;\n  Snow.canvasHeight = $canvas.clientHeight;\n  Snow.make();\n};","map":{"version":3,"names":["$canvas","document","querySelector","ctx","getContext","getRandomRadius","Math","random","getRandomSpeed","getRandomDir","floor","Snow","data","canvasWidth","clientWidth","canvasHeight","clientHeight","init","make","loop","move","draw","window","requestAnimationFrame","i","x","y","size","speed","dir","push","map","item","isMinOverPositionX","isMaxOverPositionX","isOverPositionY","clearRect","fillStyle","fillRect","forEach","beginPath","arc","PI","fill","closePath","onresize"],"sources":["/Users/minjelee/Documents/GitHub/web-dev-github/react_01/react_01/src/Components/test.js"],"sourcesContent":["const $canvas = document.querySelector(\"canvas\");\nconst ctx = $canvas.getContext(\"2d\");\n\nconst getRandomRadius = () => Math.random() * 1 + 0.5;\nconst getRandomSpeed = () => Math.random() * 0.3 + 0.1;\nconst getRandomDir = () => [-1, 1][Math.floor(Math.random() * 2)];\n\nconst Snow = {\n  data: [],\n  canvasWidth: $canvas.clientWidth,\n  canvasHeight: $canvas.clientHeight,\n\n  init() {\n    Snow.make();\n    Snow.loop();\n  },\n\n  loop() {\n    Snow.move();\n    Snow.draw();\n\n    window.requestAnimationFrame(Snow.loop);\n  },\n\n  make() {\n    const data = [];\n\n    // 랜덤한 데이터 200개 생성\n    for (let i = 0; i < 200; i++) {\n      const x = Math.random() * Snow.canvasWidth;\n      const y = Math.random() * Snow.canvasHeight;\n\n      const size = getRandomRadius();\n      const speed = getRandomSpeed();\n      const dir = getRandomDir();\n\n      data.push({ x, y, size, speed, dir });\n    }\n\n    // Snow 객체에 데이터 저장\n    Snow.data = data;\n  },\n\n  move() {\n    Snow.data = Snow.data.map((item) => {\n      // 방향에 맞게 이동\n      item.x += item.dir * item.speed;\n      item.y += item.speed;\n\n      // 캔버스를 벗어났는지 판단\n      const isMinOverPositionX = -item.size > item.x;\n      const isMaxOverPositionX = item.x > Snow.canvasWidth;\n      const isOverPositionY = item.y > Snow.canvasHeight;\n\n      // 벗어나면 반대방향, 맨 위로\n      if (isMinOverPositionX || isMaxOverPositionX) {\n        item.dir *= -1;\n      }\n      if (isOverPositionY) {\n        item.y = -item.size;\n      }\n\n      return item;\n    });\n  },\n\n  draw() {\n    ctx.clearRect(0, 0, Snow.canvasWidth, Snow.canvasHeight);\n\n    ctx.fillStyle = \"#0f1018\";\n    ctx.fillRect(0, 0, Snow.canvasWidth, Snow.canvasHeight);\n\n    Snow.data.forEach((item) => {\n      ctx.beginPath();\n      ctx.fillStyle = \"rgba(255, 255, 255, .6)\";\n      ctx.arc(item.x, item.y, item.size, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.closePath();\n    });\n  },\n};\n\nSnow.init();\n\nwindow.onresize = () => {\n  Snow.canvasWidth = $canvas.clientWidth;\n  Snow.canvasHeight = $canvas.clientHeight;\n\n  Snow.make();\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}