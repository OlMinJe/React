[{"/Users/minjelee/Documents/GitHub/StudyReact/src/index.js":"1","/Users/minjelee/Documents/GitHub/StudyReact/src/App.js":"2","/Users/minjelee/Documents/GitHub/StudyReact/src/reportWebVitals.js":"3","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Article.js":"4","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Footer.js":"5","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Header.js":"6","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/PageTitle.js":"7","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardList.js":"8","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardRead.js":"9","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardCreate.js":"10","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardUpdate.js":"11"},{"size":535,"mtime":1683858256802,"results":"12","hashOfConfig":"13"},{"size":418,"mtime":1683858256654,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1683858256802,"results":"15","hashOfConfig":"13"},{"size":2409,"mtime":1683858256654,"results":"16","hashOfConfig":"13"},{"size":442,"mtime":1683858256654,"results":"17","hashOfConfig":"13"},{"size":697,"mtime":1683858256655,"results":"18","hashOfConfig":"13"},{"size":221,"mtime":1683858256655,"results":"19","hashOfConfig":"13"},{"size":1829,"mtime":1683858256654,"results":"20","hashOfConfig":"13"},{"size":2047,"mtime":1683858256654,"results":"21","hashOfConfig":"13"},{"size":1686,"mtime":1683858256654,"results":"22","hashOfConfig":"13"},{"size":2537,"mtime":1683858256654,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b3je9g",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},"/Users/minjelee/Documents/GitHub/StudyReact/src/index.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/App.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/reportWebVitals.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Article.js",["62","63"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport PageTitle from \"./PageTitle\";\nimport BoardList from \"./BoardList\";\nimport BoardRead from \"./BoardRead\";\nimport BoardCreate from \"./BoardCreate\";\nimport BoardUpdate from \"./BoardUpdate\";\n\nclass Article extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"list\",\n      selectBoardNo: 0,\n    };\n    this.setModeAndNo = this.setModeAndNo.bind(this);\n  }\n\n  deleteBoard() {\n    axios.post(\"http://localhost:8000/delete\", {\n      no: this.state.selectBoardNo\n    })\n      .then(function(response){\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  setModeAndNo(_mode, no=0){\n    if(_mode === \"delete\") {\n      Swal.fire({\n        title: '삭제하시겠습니까?',\n        text: \"다시 한 번 생각해주세요.\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(249 77 77)',\n        cancelButtonColor: '#ccc',\n        confirmButtonText: '확인',\n        cancelButtonText: '취소',\n        reverseButtons: true,\n        \n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.deleteBoard();\n          this.setState({\n            mode: \"list\"\n          });\n          Swal.fire(\n            '삭제되었습니다.',\n            '삭제 성공~',\n            'success',\n            \n          )\n        } else {\n          this.setState({\n            mode: \"read\",\n            selectBoardNo: no\n          });\n        }\n      })\n    } else {\n      this.setState({\n        mode: _mode,\n        selectBoardNo: no\n      });\n    }\n  }\n\n  getContent() {\n    let mode = this.state.mode;\n    let section = null;\n\n    if(mode === \"list\") {\n      section = <BoardList boards={this.state.test07db} onSelectItem={this.setModeAndNo} />;\n    } else if(mode === \"read\") {\n      section = <BoardRead no={this.state.selectBoardNo} onButtonClick={this.setModeAndNo} />;\n    } else if(mode == \"create\") {\n      section = <BoardCreate onCreate={this.setModeAndNo}/>\n    } else if(mode === \"update\") {\n      section = <BoardUpdate no={this.state.selectBoardNo} onButtonClick={this.setModeAndNo}/>\n    }\n\n    return section;\n  }\n\n  render() {\n    return (\n      <article>\n        <PageTitle />\n        {this.getContent()}\n      </article>\n    );\n  }\n}\n\nexport default Article;","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Footer.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/Components/Header.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/Components/PageTitle.js",[],[],"/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardList.js",["64"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass BoardList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      boards: []\n    }\n  }\n  \n  getList() {\n    axios.get(\"http://localhost:8000/list\", {})\n      .then(function(response){\n        this.setState({boards: response.data});\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  render(){\n    let boards = this.state.boards;\n    \n    let rows = [];\n    for(let i=0; i<boards.length; i++){\n      let board = boards[i];\n      let cre_date = board.cre_date.substring(0, 10);\n      rows.push(\n        <tr key={board.no}>\n          <td>{board.no}</td>\n          <td><a href=\"#\" onClick={function(e){\n            e.preventDefault();\n            this.props.onSelectItem(\"read\", board.no);\n          }.bind(this)}>{board.title}</a></td>\n          <td>{board.author}</td>\n          <td>{cre_date}</td>\n        </tr>\n      );\n    }\n    \n    return (\n      <>\n          <div className=\"container\">\n            <article id=\"boardList\">\n              <table className=\"boardList\">\n                <thead>\n                  <tr>\n                    <th>num</th><th>제목</th><th>작성자</th><th>작성일</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {rows}\n                </tbody>\n              </table>\n              <div className=\"control\">\n                <div className=\"right\">\n                  <button type=\"button\" onClick={function(){\n                    this.props.onSelectItem(\"create\");\n                  }.bind(this)}>글쓰기</button>\n                </div>\n              </div>\n            </article>\n          </div>\n      </>\n    );\n  }\n}\n\nexport default BoardList;","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardRead.js",["65"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass BoardRead extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      board: {}\n    }\n  }\n  \n  getBoard() {\n    axios.post(\"http://localhost:8000/read\", {no: this.props.no})\n      .then(function(response){\n        let [_board] = response.data;\n        this.setState({board: _board});\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getBoard();\n  }\n\n  render() {\n    const board = this.state.board;\n    let cre_date = \"\";\n    if (board.cre_date != undefined) {\n      cre_date = board.cre_date.substring(0,10);\n    }\n\n    return (\n      <>\n        <div className=\"container\">\n          <article id=\"boardRead\">\n           <table className=\"borderHeader\">\n              <thead>\n                <tr>\n                  <td><span>이름</span>{board.author}</td>\n                  <td><span>날짜</span>{cre_date}</td>\n                </tr>\n                <tr><td className=\"txtTitle\" colSpan={2}><span>제목</span>{board.title}</td></tr>\n              </thead>\n              <tbody>\n                <tr><td className=\"boardContent\" colSpan={2}>{board.content}</td></tr>\n              </tbody>\n            </table>\n            <div className=\"control\">\n              <div className=\"left\">\n                <button type=\"button\" onClick={function(){\n                  this.props.onButtonClick(\"list\");\n                }.bind(this)}>목록</button>\n              </div>\n              <div className=\"right\">\n                <button type=\"button\" onClick={function(){\n                  this.props.onButtonClick(\"update\", board.no);\n                }.bind(this)}>수정</button>\n                <button type=\"button\" onClick={function(){\n                  this.props.onButtonClick(\"delete\", board.no);\n                }.bind(this)}>삭제</button>\n              </div>\n            </div>\n          </article>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default BoardRead;","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardCreate.js",["66"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass BoardCreate extends Component {\n  state= {id: 0};\n\n  setBoard(_author, _title, _content) {\n    let _cre_date = new Date().toISOString().substring(0, 10);\n    axios.post(\"http://localhost:8000/create\", {\n      author: _author,\n      title: _title, \n      content: _content\n    }).then(function(response){\n        let _id = response.data.id;\n        this.setState({id: _id});\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  componentDidUpdate(){\n    this.props.onCreate(\"read\", this.state.id);\n  }\n\n  render() {\n    return (\n      <>\n      <div className=\"container\">\n        <article id=\"boardUpdate\">\n          <form action=\"#\" method=\"post\" onSubmit={function(e){\n            e.preventDefault();\n            this.setBoard(\n              e.target.author.value, \n              e.target.title.value, \n              e.target.content.value\n            );\n          }.bind(this)}>\n            <div className=\"boardInput\">\n              <input type=\"text\" name=\"author\" placeholder=\"작성자\" required />\n            </div>\n            <div className=\"boardInput\">\n              <input className=\"txtTitle\" type=\"text\" name=\"title\" placeholder=\"제목\" required />\n            </div>\n            <div className=\"boardInput\">\n              <textarea name=\"content\"></textarea>\n            </div>\n            <div className=\"control\">\n              <div className=\"right\">\n                <button type=\"submit\">등록</button>\n              </div>\n            </div>\n          </form>\n        </article>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default BoardCreate;","/Users/minjelee/Documents/GitHub/StudyReact/src/Components/BoardUpdate.js",["67"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass BoardUpdate extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      no: 0,\n      title: \"\",\n      content: \"\",\n      author: \"\",\n      cre_date: \"\"\n    }\n    this.inputFormHandler = this.inputFormHandler.bind(this);\n  }\n  \n  getBoard() {\n    axios.post(\"http://localhost:8000/read\", {no: this.props.no})\n      .then(function(response){\n        let [_board] = response.data;\n        this.setState({\n          no: _board.no,\n          title: _board.title,\n          content: _board.content,\n          author: _board.author,\n          cre_date: _board.cre_date.substring(0, 10)\n        });\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  updateBoard() {\n    axios.post(\"http://localhost:8000/update\", {\n      no: this.state.no, \n      title: this.state.title, \n      content: this.state.content\n    })\n      .then(function(response){\n      }.bind(this))\n      .catch(function(error){\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getBoard();\n  }\n\n  inputFormHandler(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <article id=\"boardUpdate\">\n          <form action=\"#\" method=\"post\" onSubmit={function(e){\n            e.preventDefault();\n            this.updateBoard();\n            this.props.onButtonClick(\"read\", this.state.no);\n          }.bind(this)}>\n            <div className=\"boardUpdateHeader\">\n              <div><span>이름</span>{this.state.author}</div>\n              <div><span>날짜</span>{this.state.cre_date}</div>\n            </div>\n            <div className=\"boardInput\">\n              <input className=\"txtTitle\" type=\"text\" name=\"title\" placeholder=\"제목\" \n                value={this.state.title} onChange={this.inputFormHandler} />\n            </div>\n            <div className=\"boardInput\">\n              <textarea name=\"content\" value={this.state.content} onChange={this.inputFormHandler}\n                ></textarea>\n            </div>\n            <div className=\"control\">\n              <div className=\"left\">\n                <button onClick={this.goBack}>목록</button>\n              </div>\n              <div className=\"right\">\n                <button type=\"submit\">수정</button>\n              </div>\n            </div>\n          </form>\n        </article>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default BoardUpdate;",{"ruleId":"68","severity":1,"message":"69","line":25,"column":9,"nodeType":"70","messageId":"71","endLine":25,"endColumn":13,"fix":"72"},{"ruleId":"73","severity":1,"message":"74","line":79,"column":20,"nodeType":"75","messageId":"71","endLine":79,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":36,"column":15,"nodeType":"78","endLine":39,"endColumn":25},{"ruleId":"73","severity":1,"message":"79","line":30,"column":24,"nodeType":"75","messageId":"71","endLine":30,"endColumn":26},{"ruleId":"80","severity":1,"message":"81","line":8,"column":9,"nodeType":"82","messageId":"83","endLine":8,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":41,"column":9,"nodeType":"70","messageId":"71","endLine":41,"endColumn":13,"fix":"84"},"no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"85","text":"86"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '!==' and instead saw '!='.","no-unused-vars","'_cre_date' is assigned a value but never used.","Identifier","unusedVar",{"range":"87","text":"86"},[647,658],"",[992,1003]]